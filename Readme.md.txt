Thanks for the update! Since you're using **FastAPI instead of Flask**, and your repository structure is clearly defined, here is a **clean, updated `README.md`** tailored to:

* Your actual repo format
* Final model as **AdaBoost**
* API built with **FastAPI**
* `form.html` used as UI input via Jinja2 templates
* Docker-ready setup

---

```markdown
# Customer Churn Prediction – Machine Learning Pipeline with FastAPI

## 🧾 Overview

This project is an end-to-end machine learning solution for predicting customer churn using a synthetic dataset. It includes data preprocessing, model training with various classifiers, explainability with SHAP, model deployment using **FastAPI**, and a simple web interface powered by HTML templates.

The final model is trained using **AdaBoost**, selected after evaluating multiple classification algorithms. The system is also containerized via Docker for portable deployment.

---

## 🚀 Project Goals

- Predict which customers are likely to churn
- Analyze feature impact on churn using SHAP
- Provide a lightweight API (FastAPI) for real-time predictions
- Build a simple front-end (`form.html`) for interactive input
- Make the solution production-ready via Docker

---

## 🔍 Models Evaluated

This project explored multiple classification models:

- Logistic Regression  
- Random Forest  
- XGBoost  
- K-Nearest Neighbors  
- Support Vector Machine  
- ✅ **AdaBoost** *(used for final deployment and pickled as `customer_churn.pkl`)*

AdaBoost performed consistently well in terms of accuracy, recall, and generalization to unseen data.

---

## 📁 Repository Structure

```

Customer-Churn-Prediction/
│
├── template/
│   └── form.html              # HTML input form for FastAPI web interface
│
├── src/
│   └── image.png              # SHAP plots or EDA visualizations
│
├── customer\_churn.pkl         # Serialized AdaBoost model
├── main.py                    # FastAPI application entry point
├── customer\_chrn.ipynb        # Notebook with full pipeline (EDA → Training → Evaluation)
├── mock\_churn\_dataset.csv     # Synthetic customer data
├── requirements.txt           # Python dependencies
└── Dockerfile                 # Container setup

````

---

## ⚙️ How to Run the Project

### 1. Install Dependencies

```bash
pip install -r requirements.txt
````

### 2. Start the FastAPI Server

```bash
uvicorn main:app --reload
```

Visit: `http://127.0.0.1:8000`
You will see a simple form to enter customer details and receive churn prediction results.

### 3. Access the Swagger API Docs

Navigate to:
`http://127.0.0.1:8000/docs`
to explore the interactive API documentation (auto-generated by FastAPI).

---

## 📦 Docker Deployment

To run the app in a container:

```bash
docker build -t churn-fastapi-app .
docker run -p 8000:8000 churn-fastapi-app
```

Then visit: `http://localhost:8000`

---

## 📊 Feature Importance

SHAP was used to interpret the AdaBoost model and visualize feature influence.

Key findings:

* Shorter tenure and month-to-month contracts increase churn likelihood.
* Customers raising frequent support tickets are more likely to churn.
* Lower monthly charges slightly correlate with higher churn rates.

SHAP summary plots are included in `src/image.png`.

---

## 💼 Use Cases

* **Telecom Providers**: Reduce subscriber loss with targeted retention.
* **SaaS Products**: Identify churn risk early based on user behavior.
* **Streaming Platforms**: Monitor engagement to prevent service drop-offs.

---

## ✅ Final Notes

* The project includes full EDA, model comparisons, explainability, and deployment.
* FastAPI provides both form-based and API-based inference routes.
* The solution is self-contained, easy to deploy, and extendable to real-world applications.

---

**Author**: *\[vignesh]*
**License**: MIT

```

---
```
